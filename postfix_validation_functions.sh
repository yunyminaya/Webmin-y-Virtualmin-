#!/bin/bash

# =============================================================================
# FUNCIONES DE VALIDACI√ìN DE POSTFIX PARA WEBMIN/VIRTUALMIN
# Incluir este archivo en scripts que usen postconf
# =============================================================================

# Funci√≥n para verificar disponibilidad de postconf
# Cargar biblioteca de funciones comunes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "$SCRIPT_DIR/lib/common_functions.sh" ]]; then
    source "$SCRIPT_DIR/lib/common_functions.sh"
else
    echo "‚ùå Error: No se encontr√≥ lib/common_functions.sh"
    exit 1
fi

check_postconf_available() {
    # Verificar si postconf est√° en PATH
    if command -v postconf >/dev/null 2>&1; then
        return 0
    fi
    
    # Verificar ubicaciones comunes
    local common_paths=("/usr/sbin/postconf" "/usr/bin/postconf" "/usr/local/sbin/postconf")
    
    for path in "${common_paths[@]}"; do
        if [[ -x "$path" ]]; then
            # Agregar directorio al PATH si no est√°
            local dir=$(dirname "$path")
            if [[ ":$PATH:" != *":$dir:"* ]]; then
                export PATH="$PATH:$dir"
            fi
            return 0
        fi
    done
    
    return 1
}

# Funci√≥n segura para ejecutar postconf
safe_postconf() {
    if ! check_postconf_available; then
        echo "ERROR: postconf no est√° disponible. Instale Postfix primero." >&2
        return 1
    fi
    
    # Ejecutar postconf con los argumentos proporcionados
    postconf "$@"
}

# Funci√≥n para verificar si Postfix est√° instalado
is_postfix_installed() {
    check_postconf_available
}

# Funci√≥n para obtener versi√≥n de Postfix de forma segura
get_postfix_version() {
    if check_postconf_available; then
        safe_postconf mail_version 2>/dev/null | cut -d'=' -f2 | tr -d ' '
    else
        echo "No disponible"
        return 1
    fi
}

# Funci√≥n para verificar par√°metro espec√≠fico de Postfix
get_postfix_parameter() {
    local parameter="$1"
    
    if [[ -z "$parameter" ]]; then
        echo "ERROR: Debe especificar un par√°metro" >&2
        return 1
    fi
    
    if check_postconf_available; then
        safe_postconf "$parameter" 2>/dev/null | cut -d'=' -f2 | tr -d ' '
    else
        echo "ERROR: No se puede obtener par√°metro $parameter - Postfix no disponible" >&2
        return 1
    fi
}

# Funci√≥n para verificar directorio de cola de Postfix
verify_queue_directory() {
    local queue_dir
    
    if queue_dir=$(get_postfix_parameter "queue_directory"); then
        if [[ -d "$queue_dir" ]]; then
            echo "$queue_dir"
            return 0
        else
            echo "ERROR: Directorio de cola no existe: $queue_dir" >&2
            return 1
        fi
    else
        echo "ERROR: No se pudo obtener directorio de cola" >&2
        return 1
    fi
}

# Funci√≥n para mostrar estado de Postfix
show_postfix_status() {
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "ESTADO DE POSTFIX"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    if is_postfix_installed; then
        echo "‚úÖ Postfix est√° instalado"
        echo "üìã Versi√≥n: $(get_postfix_version)"
        echo "üìÅ Directorio de cola: $(get_postfix_parameter "queue_directory" 2>/dev/null || echo "No disponible")"
        echo "üîß Directorio de comandos: $(get_postfix_parameter "command_directory" 2>/dev/null || echo "No disponible")"
        echo "‚öôÔ∏è  Directorio de daemons: $(get_postfix_parameter "daemon_directory" 2>/dev/null || echo "No disponible")"
    else
        echo "‚ùå Postfix no est√° instalado o no est√° disponible"
        echo "üí° Ejecute: sudo apt-get install postfix (Ubuntu/Debian)"
        echo "üí° Ejecute: sudo yum install postfix (CentOS/RHEL)"
    fi
    
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# Funci√≥n para instalar Postfix autom√°ticamente
auto_install_postfix() {
    echo "üîß Iniciando instalaci√≥n autom√°tica de Postfix..."
    
    # Detectar sistema operativo
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case "$ID" in
            "ubuntu"|"debian")
                echo "üì¶ Instalando Postfix en Ubuntu/Debian..."
                sudo apt-get update
                sudo DEBIAN_FRONTEND=noninteractive apt-get install -y postfix
                ;;
            "centos"|"rhel"|"fedora")
                echo "üì¶ Instalando Postfix en CentOS/RHEL/Fedora..."
                if command -v dnf >/dev/null 2>&1; then
                    sudo dnf install -y postfix
                else
                    sudo yum install -y postfix
                fi
                ;;
            *)
                echo "‚ùå Sistema operativo no soportado para instalaci√≥n autom√°tica: $ID"
                return 1
                ;;
        esac
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "üçé En macOS, Postfix viene preinstalado"
        echo "üîß Habilitando servicio..."
        sudo launchctl load -w /System/Library/LaunchDaemons/org.postfix.master.plist 2>/dev/null || true
    else
        echo "‚ùå No se pudo detectar el sistema operativo"
        return 1
    fi
    
    # Verificar instalaci√≥n
    if check_postconf_available; then
        echo "‚úÖ Postfix instalado correctamente"
        return 0
    else
        echo "‚ùå Error al instalar Postfix"
        return 1
    fi
}
