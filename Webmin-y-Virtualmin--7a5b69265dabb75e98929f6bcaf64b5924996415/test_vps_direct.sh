#!/bin/bash
# Script de prueba directa para VPS - Copia y pega el contenido completo

set -euo pipefail
IFS=$'\n\t'

LOG_FILE="/tmp/test_directo_$(date +%Y%m%d_%H%M%S).log"
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" >> "$LOG_FILE"
    echo -e "${BLUE}[TEST]${NC} $*"
}

error_log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $*" >> "$LOG_FILE"
    echo -e "${RED}[ERROR]${NC} $*"
}

success_log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - SUCCESS: $*" >> "$LOG_FILE"
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

echo ""
echo -e "${BLUE}üß™ PRUEBA DIRECTA DEL SISTEMA WEBMIN/VIRTUALMIN${NC}"
echo -e "${BLUE}Ejecutando diagn√≥stico y reparaciones autom√°ticas${NC}"
echo ""

# Verificar servicios cr√≠ticos
echo "=== VERIFICANDO SERVICIOS CR√çTICOS ==="
services=("webmin" "apache2" "nginx" "mysql" "mariadb" "ssh")
failed_services=0

for service in "${services[@]}"; do
    if systemctl is-active --quiet "$service" 2>/dev/null; then
        success_log "‚úÖ $service est√° ACTIVO"
    else
        error_log "‚ùå $service est√° INACTIVO/NO INSTALADO"
        ((failed_services++))
    fi
done

echo ""
echo "=== VERIFICANDO RECURSOS DEL SISTEMA ==="

# CPU
cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}' 2>/dev/null || echo "N/A")
if [[ "$cpu_usage" != "N/A" ]]; then
    if (( $(echo "$cpu_usage > 90" | bc -l 2>/dev/null || echo "0") )); then
        error_log "‚ùå CPU CR√çTICO: ${cpu_usage}%"
    elif (( $(echo "$cpu_usage > 70" | bc -l 2>/dev/null || echo "0") )); then
        log "‚ö†Ô∏è CPU ALTO: ${cpu_usage}%"
    else
        success_log "‚úÖ CPU NORMAL: ${cpu_usage}%"
    fi
fi

# Memoria
mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}' 2>/dev/null || echo "N/A")
if [[ "$mem_usage" != "N/A" ]]; then
    if [[ $mem_usage -gt 95 ]]; then
        error_log "‚ùå MEMORIA CR√çTICA: ${mem_usage}%"
    elif [[ $mem_usage -gt 80 ]]; then
        log "‚ö†Ô∏è MEMORIA ALTA: ${mem_usage}%"
    else
        success_log "‚úÖ MEMORIA NORMAL: ${mem_usage}%"
    fi
fi

# Disco
disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//' 2>/dev/null || echo "N/A")
if [[ "$disk_usage" != "N/A" ]]; then
    if [[ $disk_usage -gt 95 ]]; then
        error_log "‚ùå DISCO CR√çTICO: ${disk_usage}%"
    elif [[ $disk_usage -gt 85 ]]; then
        log "‚ö†Ô∏è DISCO ALTO: ${disk_usage}%"
    else
        success_log "‚úÖ DISCO NORMAL: ${disk_usage}%"
    fi
fi

echo ""
echo "=== PRUEBA DE ACCESO A WEBMIN ==="

# Verificar Webmin
if [[ -d /usr/share/webmin ]]; then
    success_log "‚úÖ Webmin est√° instalado"
    
    if systemctl is-active --quiet webmin 2>/dev/null; then
        success_log "‚úÖ Servicio Webmin activo"
        
        # Probar conexi√≥n al puerto 10000
        if timeout 5 bash -c "</dev/tcp/localhost/10000" 2>/dev/null; then
            success_log "‚úÖ Puerto 10000 accesible - Webmin funcionando"
        else
            error_log "‚ùå Puerto 10000 no accesible"
        fi
    else
        error_log "‚ùå Servicio Webmin inactivo"
    fi
else
    error_log "‚ùå Webmin no est√° instalado"
fi

echo ""
echo "=== EJECUTANDO REPARACIONES AUTOM√ÅTICAS ==="

# Intentar reparaciones b√°sicas
reparaciones_realizadas=0

# Reparar servicios
for service in "${services[@]}"; do
    if ! systemctl is-active --quiet "$service" 2>/dev/null && systemctl list-units --type=service | grep -q "$service" 2>/dev/null; then
        log "Intentando iniciar $service..."
        if systemctl start "$service" 2>/dev/null; then
            success_log "‚úÖ $service iniciado correctamente"
            ((reparaciones_realizadas++))
        fi
    fi
done

# Liberar memoria si es necesario
if [[ "$mem_usage" != "N/A" ]] && [[ $mem_usage -gt 85 ]]; then
    log "Liberando memoria del sistema..."
    sync
    echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true
    success_log "‚úÖ Memoria liberada"
    ((reparaciones_realizadas++))
fi

echo ""
echo "=== RESULTADOS FINALES ==="
echo ""
echo -e "${BLUE}üìä RESUMEN DE LA PRUEBA:${NC}"
echo "   ‚Ä¢ Servicios verificados: ${#services[@]}"
echo "   ‚Ä¢ Servicios fallidos: $failed_services"
echo "   ‚Ä¢ Reparaciones realizadas: $reparaciones_realizadas"
echo "   ‚Ä¢ Log completo: $LOG_FILE"
echo ""

if [[ $failed_services -eq 0 ]]; then
    echo -e "${GREEN}üéâ ¬°EXCELENTE! TU SISTEMA EST√Å FUNCIONANDO PERFECTAMENTE${NC}"
    echo "   ‚úÖ Todos los servicios cr√≠ticos est√°n activos"
    echo "   ‚úÖ Recursos del sistema normales"
    echo "   ‚úÖ Webmin funcionando correctamente"
else
    echo -e "${YELLOW}‚ö†Ô∏è SE ENCONTRARON ALGUNOS PROBLEMAS${NC}"
    echo "   ‚ùå $failed_services servicios necesitan atenci√≥n"
    echo "   üîß Se intentaron reparaciones autom√°ticas"
    echo ""
    echo -e "${BLUE}üí° RECOMENDACIONES:${NC}"
    echo "   ‚Ä¢ Revisa el log completo: cat $LOG_FILE"
    echo "   ‚Ä¢ Verifica servicios manualmente: systemctl status <servicio>"
    echo "   ‚Ä¢ Reinicia servicios si es necesario"
fi

echo ""
echo -e "${BLUE}üìã PARA M√ÅS DETALLES:${NC}"
echo "   cat $LOG_FILE"
echo ""
echo -e "${GREEN}‚úÖ PRUEBA COMPLETADA - REVISADO: $(date)${NC}"
