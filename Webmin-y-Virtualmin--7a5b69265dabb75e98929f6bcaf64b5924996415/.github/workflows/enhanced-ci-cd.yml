name: Enhanced CI/CD Pipeline for Virtualmin Enterprise

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de análisis estático de código y seguridad
  code-quality:
    name: Code Quality and Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint bandit safety semgrep
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint with pylint
      run: |
        pylint $(git ls-files '*.py') || true
    
    - name: Run Bandit Security Linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep Security Scan
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep.sarif

  # Job de pruebas unitarias y de integración
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=. --cov-report=xml --cov-report=html --junitxml=unit-test-results.xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ --junitxml=integration-test-results.xml
    
    - name: Run functional tests
      run: |
        pytest tests/functional/ --junitxml=functional-test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          unit-test-results.xml
          integration-test-results.xml
          functional-test-results.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job de construcción de imágenes Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Job de escaneo de vulnerabilidades en la imagen
  vulnerability-scan:
    name: Container Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de despliegue a staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, vulnerability-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to staging using Terraform
      run: |
        cd cluster_infrastructure/terraform
        terraform init
        terraform workspace select staging || terraform workspace new staging
        terraform apply -auto-approve -var-file=staging.tfvars
    
    - name: Generate Ansible inventory
      run: |
        cd cluster_infrastructure/ansible
        python3 scripts/generate_inventory.py ../terraform/terraform_outputs.json staging_inventory.ini
    
    - name: Deploy application with Ansible
      run: |
        cd cluster_infrastructure/ansible
        ansible-playbook -i staging_inventory.ini site.yml --extra-vars "environment=staging"
    
    - name: Run smoke tests
      run: |
        cd tests
        python3 smoke_tests.py --environment=staging

  # Job de despliegue a producción
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, vulnerability-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to production using Terraform
      run: |
        cd cluster_infrastructure/terraform
        terraform init
        terraform workspace select production || terraform workspace new production
        terraform apply -auto-approve -var-file=production.tfvars
    
    - name: Generate Ansible inventory
      run: |
        cd cluster_infrastructure/ansible
        python3 scripts/generate_inventory.py ../terraform/terraform_outputs.json production_inventory.ini
    
    - name: Deploy application with Ansible
      run: |
        cd cluster_infrastructure/ansible
        ansible-playbook -i production_inventory.ini site.yml --extra-vars "environment=production"
    
    - name: Run smoke tests
      run: |
        cd tests
        python3 smoke_tests.py --environment=production
    
    - name: Run load tests
      run: |
        cd tests
        python3 run_load_tests.py --environment=production --duration=300

  # Job de pruebas de caos y resiliencia
  chaos-testing:
    name: Chaos and Resilience Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Chaos Engineering tools
      run: |
        pip install chaos-toolkit chaos-toolkit-aws extensions
    
    - name: Run Chaos experiments
      run: |
        cd tests/chaos
        python3 run_chaos_experiments.py --environment=staging
    
    - name: Validate system resilience
      run: |
        cd tests
        python3 validate_resilience.py --environment=staging

  # Job de monitorización post-despliegue
  post-deploy-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install monitoring dependencies
      run: |
        pip install requests prometheus-client grafana-api
    
    - name: Monitor system health
      run: |
        cd monitoring
        python3 post_deploy_health_check.py
    
    - name: Generate deployment report
      run: |
        cd monitoring
        python3 generate_deployment_report.py
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: monitoring/deployment_report.html

  # Job de notificación
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, vulnerability-scan, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: needs.build.result == 'success' && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Virtualmin Enterprise deployment successful!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          ❌ Virtualmin Enterprise deployment failed!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
          Please check the logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send email notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Virtualmin Enterprise Deployment Failed"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub Actions <github-actions@virtualmin-enterprise.com>"
        body: |
          The Virtualmin Enterprise deployment has failed.
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
          
          Please check the GitHub Actions logs for details.