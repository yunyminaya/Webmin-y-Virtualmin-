#!/bin/bash

# ============================================================================
# üìä DASHBOARD DE ESTADO DEL SISTEMA DE AUTO-REPARACI√ìN AUT√ìNOMA
# ============================================================================
# Muestra el estado en tiempo real del sistema aut√≥nomo
# Reportes, estad√≠sticas y control del sistema
# ============================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AUTONOMOUS_SCRIPT="$SCRIPT_DIR/autonomous_repair.sh"
STATUS_FILE="$SCRIPT_DIR/auto_repair_status.json"
LOG_FILE="$SCRIPT_DIR/auto_repair_daemon.log"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Funci√≥n para mostrar estado del sistema
show_system_status() {
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë               üìä DASHBOARD DEL SISTEMA AUT√ìNOMO                   ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""

    # Estado del servicio
    echo -e "${BLUE}üîß ESTADO DEL SERVICIO:${NC}"
    if systemctl is-active --quiet auto-repair 2>/dev/null; then
        echo -e "${GREEN}   ‚úÖ Servicio activo y funcionando${NC}"
    else
        echo -e "${RED}   ‚ùå Servicio inactivo${NC}"
    fi
    echo ""

    # Informaci√≥n del sistema
    if [[ -f "$STATUS_FILE" ]]; then
        echo -e "${BLUE}üìà √öLTIMA ACTUALIZACI√ìN:${NC}"
        local timestamp
        timestamp=$(grep -o '"timestamp":"[^"]*"' "$STATUS_FILE" | cut -d'"' -f4 2>/dev/null || echo "N/A")
        echo "   üìÖ $timestamp"
        echo ""

        echo -e "${BLUE}üéØ ESTAD√çSTICAS DE REPARACI√ìN:${NC}"
        local issues_found repairs_attempted repairs_successful
        issues_found=$(grep -o '"issues_found":[0-9]*' "$STATUS_FILE" | cut -d':' -f2 2>/dev/null || echo "0")
        repairs_attempted=$(grep -o '"repairs_attempted":[0-9]*' "$STATUS_FILE" | cut -d':' -f2 2>/dev/null || echo "0")
        repairs_successful=$(grep -o '"repairs_successful":[0-9]*' "$STATUS_FILE" | cut -d':' -f2 2>/dev/null || echo "0")

        echo "   üîç Problemas encontrados: $issues_found"
        echo "   üîß Reparaciones intentadas: $repairs_attempted"
        echo "   ‚úÖ Reparaciones exitosas: $repairs_successful"
        echo ""

        echo -e "${BLUE}üíª RECURSOS DEL SISTEMA:${NC}"
        local mem_usage cpu_usage disk_usage
        mem_usage=$(grep -o '"memory_usage":[0-9]*' "$STATUS_FILE" | cut -d':' -f2 2>/dev/null || echo "N/A")
        cpu_usage=$(grep -o '"cpu_usage":[0-9]*' "$STATUS_FILE" | cut -d':' -f2 2>/dev/null || echo "N/A")
        disk_usage=$(grep -o '"disk_usage":[0-9]*' "$STATUS_FILE" | cut -d':' -f2 2>/dev/null || echo "N/A")

        if [[ $mem_usage -gt 80 ]]; then
            echo -e "   üß† Memoria: ${RED}$mem_usage%${NC} (ALTO)"
        else
            echo -e "   üß† Memoria: ${GREEN}$mem_usage%${NC}"
        fi

        if [[ $cpu_usage -gt 90 ]]; then
            echo -e "   ‚ö° CPU: ${RED}$cpu_usage%${NC} (CR√çTICO)"
        elif [[ $cpu_usage -gt 70 ]]; then
            echo -e "   ‚ö° CPU: ${YELLOW}$cpu_usage%${NC} (ALTO)"
        else
            echo -e "   ‚ö° CPU: ${GREEN}$cpu_usage%${NC}"
        fi

        if [[ $disk_usage -gt 85 ]]; then
            echo -e "   üíæ Disco: ${RED}$disk_usage%${NC} (CR√çTICO)"
        elif [[ $disk_usage -gt 70 ]]; then
            echo -e "   üíæ Disco: ${YELLOW}$disk_usage%${NC} (ALTO)"
        else
            echo -e "   üíæ Disco: ${GREEN}$disk_usage%${NC}"
        fi
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è No hay informaci√≥n de estado disponible${NC}"
        echo "      El sistema a√∫n no ha completado su primer ciclo de monitoreo"
    fi
    echo ""
}

# Funci√≥n para mostrar logs recientes
show_recent_logs() {
    echo -e "${BLUE}üìù LOGS RECIENTES:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    if [[ -f "$LOG_FILE" ]]; then
        tail -15 "$LOG_FILE" | while read -r line; do
            if echo "$line" | grep -q "SUCCESS"; then
                echo -e "${GREEN}$line${NC}"
            elif echo "$line" | grep -q "ERROR\|CRITICAL"; then
                echo -e "${RED}$line${NC}"
            elif echo "$line" | grep -q "WARNING"; then
                echo -e "${YELLOW}$line${NC}"
            else
                echo "$line"
            fi
        done
    else
        echo -e "${YELLOW}   No hay logs disponibles a√∫n${NC}"
    fi
    echo ""
}

# Funci√≥n para mostrar servicios monitoreados
show_monitored_services() {
    echo -e "${BLUE}üîç SERVICIOS MONITOREADOS:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    local services=("webmin" "apache2" "nginx" "mysql" "mariadb" "postfix" "dovecot" "ssh" "ufw" "fail2ban")

    for service in "${services[@]}"; do
        printf "   %-15s " "$service:"
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ ACTIVO${NC}"
        else
            echo -e "${RED}‚ùå INACTIVO${NC}"
        fi
    done
    echo ""
}

# Funci√≥n para mostrar acciones disponibles
show_available_actions() {
    echo -e "${BLUE}üéÆ ACCIONES DISPONIBLES:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "   1. üîÑ Reiniciar servicio aut√≥nomo"
    echo "   2. üìä Generar reporte inmediato"
    echo "   3. üîß Ejecutar reparaci√≥n manual"
    echo "   4. üìß Probar env√≠o de email"
    echo "   5. üõë Detener sistema aut√≥nomo"
    echo "   6. ‚ñ∂Ô∏è  Iniciar sistema aut√≥nomo"
    echo "   7. üìã Ver configuraci√≥n actual"
    echo "   8. üîÑ Recargar configuraci√≥n"
    echo "   9. üìà Ver estad√≠sticas detalladas"
    echo "   0. üö™ Salir del dashboard"
    echo ""
}

# Funci√≥n para ejecutar acciones
execute_action() {
    local action="$1"

    case "$action" in
        1)
            echo -e "${BLUE}üîÑ Reiniciando servicio aut√≥nomo...${NC}"
            systemctl restart auto-repair
            sleep 2
            if systemctl is-active --quiet auto-repair; then
                echo -e "${GREEN}‚úÖ Servicio reiniciado correctamente${NC}"
            else
                echo -e "${RED}‚ùå Error al reiniciar servicio${NC}"
            fi
            ;;
        2)
            echo -e "${BLUE}üìä Generando reporte...${NC}"
            "$AUTONOMOUS_SCRIPT" report
            echo -e "${GREEN}‚úÖ Reporte generado${NC}"
            ;;
        3)
            echo -e "${BLUE}üîß Ejecutando reparaci√≥n manual...${NC}"
            "$AUTONOMOUS_SCRIPT" monitor
            echo -e "${GREEN}‚úÖ Reparaci√≥n completada${NC}"
            ;;
        4)
            echo -e "${BLUE}üìß Probando env√≠o de email...${NC}"
            echo "Prueba de email del sistema aut√≥nomo" | mail -s "Prueba Auto-Repair" root@localhost 2>/dev/null && \
                echo -e "${GREEN}‚úÖ Email enviado correctamente${NC}" || \
                echo -e "${RED}‚ùå Error al enviar email${NC}"
            ;;
        5)
            echo -e "${YELLOW}üõë Deteniendo sistema aut√≥nomo...${NC}"
            systemctl stop auto-repair
            systemctl disable auto-repair
            echo -e "${GREEN}‚úÖ Sistema detenido${NC}"
            ;;
        6)
            echo -e "${BLUE}‚ñ∂Ô∏è Iniciando sistema aut√≥nomo...${NC}"
            systemctl enable auto-repair
            systemctl start auto-repair
            sleep 2
            if systemctl is-active --quiet auto-repair; then
                echo -e "${GREEN}‚úÖ Sistema iniciado correctamente${NC}"
            else
                echo -e "${RED}‚ùå Error al iniciar sistema${NC}"
            fi
            ;;
        7)
            echo -e "${BLUE}üìã Configuraci√≥n actual:${NC}"
            if [[ -f "$SCRIPT_DIR/autonomous_config.sh" ]]; then
                echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                cat "$SCRIPT_DIR/autonomous_config.sh"
            else
                echo -e "${RED}‚ùå Archivo de configuraci√≥n no encontrado${NC}"
            fi
            ;;
        8)
            echo -e "${BLUE}üîÑ Recargando configuraci√≥n...${NC}"
            systemctl daemon-reload
            echo -e "${GREEN}‚úÖ Configuraci√≥n recargada${NC}"
            ;;
        9)
            echo -e "${BLUE}üìà Estad√≠sticas detalladas:${NC}"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            if [[ -f "$STATUS_FILE" ]]; then
                cat "$STATUS_FILE" | python3 -m json.tool 2>/dev/null || cat "$STATUS_FILE"
            else
                echo -e "${YELLOW}No hay estad√≠sticas disponibles${NC}"
            fi
            ;;
        0)
            echo -e "${GREEN}üëã ¬°Hasta luego! El sistema contin√∫a funcionando autom√°ticamente.${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Opci√≥n no v√°lida${NC}"
            ;;
    esac

    echo ""
    read -p "Presiona Enter para continuar..."
}

# Funci√≥n principal del dashboard
main_dashboard() {
    while true; do
        clear
        show_system_status
        show_monitored_services
        show_recent_logs
        show_available_actions

        read -p "Selecciona una acci√≥n (0-9): " choice
        echo ""

        if [[ "$choice" =~ ^[0-9]$ ]]; then
            execute_action "$choice"
        else
            echo -e "${RED}‚ùå Por favor ingresa un n√∫mero v√°lido (0-9)${NC}"
            sleep 2
        fi
    done
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Dashboard del Sistema de Auto-Reparaci√≥n Aut√≥noma"
    echo ""
    echo "Uso: $0 [opciones]"
    echo ""
    echo "Opciones:"
    echo "  --dashboard, -d    Mostrar dashboard interactivo (por defecto)"
    echo "  --status, -s       Mostrar estado del sistema"
    echo "  --logs, -l         Mostrar logs recientes"
    echo "  --services, -v     Mostrar estado de servicios"
    echo "  --help, -h         Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0 --dashboard     # Dashboard interactivo completo"
    echo "  $0 --status        # Solo estado del sistema"
    echo "  $0 --logs          # Solo logs recientes"
}

# Procesar argumentos
case "${1:-}" in
    "--dashboard"|"-d"|"")
        main_dashboard
        ;;
    "--status"|"-s")
        show_system_status
        ;;
    "--logs"|"-l")
        show_recent_logs
        ;;
    "--services"|"-v")
        show_monitored_services
        ;;
    "--help"|"-h")
        show_help
        ;;
    *)
        echo -e "${RED}Opci√≥n no v√°lida: $1${NC}"
        show_help
        exit 1
        ;;
esac
