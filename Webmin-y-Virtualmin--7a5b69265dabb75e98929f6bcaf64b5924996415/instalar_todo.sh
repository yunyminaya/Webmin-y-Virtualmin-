#!/bin/bash

# =============================================================================
# üöÄ INSTALACI√ìN COMPLETA WEBMIN Y VIRTUALMIN CON UN SOLO COMANDO
# =============================================================================
#
# Este script instala completamente Webmin y Virtualmin con todas las
# funcionalidades premium GRATIS en un solo comando.
#
# USO: ./instalar_todo.sh [opciones]
#
# OPCIONES:
#   --help          : Muestra esta ayuda
#   --skip-validation: Omite la validaci√≥n inicial (no recomendado)
#   --only-validation: Solo ejecuta validaci√≥n, no instala
#   --with-docker   : Incluye configuraci√≥n Docker
#   --with-kubernetes: Incluye configuraci√≥n Kubernetes
#   --with-monitoring: Incluye monitoreo del sistema
#   --with-backup   : Incluye configuraci√≥n de backup multi-cloud
#
# EJEMPLOS:
#   ./instalar_todo.sh                           # Instalaci√≥n completa est√°ndar
#   ./instalar_todo.sh --with-docker             # + Docker
#   ./instalar_todo.sh --with-kubernetes         # + Kubernetes
#   ./instalar_todo.sh --with-monitoring         # + Monitoreo
#   ./instalar_todo.sh --with-backup             # + Backup multi-cloud
#   ./instalar_todo.sh --with-docker --with-kubernetes --with-monitoring --with-backup  # Todo
#
# =============================================================================

set -euo pipefail
IFS=$'\n\t'

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Variables globales
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="/var/log/webmin_virtualmin_install.log"
START_TIME=$(date +%s)

# Flags de opciones
SKIP_VALIDATION=false
ONLY_VALIDATION=false
WITH_DOCKER=false
WITH_KUBERNETES=false
WITH_MONITORING=false
WITH_BACKUP=false

# Funci√≥n para mostrar ayuda
show_help() {
    cat << EOF
${BLUE}üöÄ INSTALACI√ìN COMPLETA WEBMIN Y VIRTUALMIN${NC}

Este script instala completamente Webmin y Virtualmin con todas las
funcionalidades premium GRATIS en un solo comando.

${YELLOW}USO:${NC}
    ./instalar_todo.sh [opciones]

${YELLOW}OPCIONES:${NC}
    --help              Muestra esta ayuda
    --skip-validation   Omite la validaci√≥n inicial (no recomendado)
    --only-validation   Solo ejecuta validaci√≥n, no instala
    --with-docker       Incluye configuraci√≥n Docker
    --with-kubernetes   Incluye configuraci√≥n Kubernetes
    --with-monitoring   Incluye monitoreo del sistema
    --with-backup       Incluye configuraci√≥n de backup multi-cloud

${YELLOW}EJEMPLOS:${NC}
    ./instalar_todo.sh                           # Instalaci√≥n completa est√°ndar
    ./instalar_todo.sh --with-docker             # + Docker
    ./instalar_todo.sh --with-kubernetes         # + Kubernetes
    ./instalar_todo.sh --with-monitoring         # + Monitoreo
    ./instalar_todo.sh --with-backup             # + Backup multi-cloud
    ./instalar_todo.sh --with-docker --with-kubernetes --with-monitoring --with-backup  # Todo

${YELLOW}FUNCIONALIDADES INCLUIDAS GRATIS:${NC}
    üé® Authentic Theme Pro     (Incluido)
    üåê Virtualmin Pro          (Incluido)
    üîí SSL Certificados        (Incluido)
    üìß Email Server            (Incluido)
    üíæ Backup System           (Incluido)
    üìä Monitoreo Avanzado      (Incluido)
    ‚òÅÔ∏è Multi-Cloud             (Incluido)
    üê≥ Contenedores            (Incluido)


EOF
}

# Funci√≥n para logging
log() {
    local level="$1"
    local message="$2"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    # Crear directorio de logs si no existe
    mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null || true

    # Escribir a archivo
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"

    # Mostrar en pantalla
    case "$level" in
        "INFO")     echo -e "${BLUE}[$timestamp INFO]${NC} $message" ;;
        "SUCCESS")  echo -e "${GREEN}[$timestamp SUCCESS]${NC} $message" ;;
        "WARNING")  echo -e "${YELLOW}[$timestamp WARNING]${NC} $message" ;;
        "ERROR")    echo -e "${RED}[$timestamp ERROR]${NC} $message" ;;
        "STEP")     echo -e "${PURPLE}[$timestamp STEP]${NC} $message" ;;
        "CRITICAL") echo -e "${RED}${WHITE}[$timestamp CRITICAL]${NC} $message" ;;
    esac
}

# Funci√≥n para mostrar progreso
show_progress() {
    local current="$1"
    local total="$2"
    local description="$3"
    local percentage=$((current * 100 / total))
    local progress_bar=""

    # Crear barra de progreso
    for ((i=0; i<percentage/2; i++)); do
        progress_bar="${progress_bar}‚ñà"
    done
    for ((i=percentage/2; i<50; i++)); do
        progress_bar="${progress_bar}‚ñë"
    done

    echo -ne "\\r${BLUE}[$current/$total]${NC} ${description} ${progress_bar} ${percentage}%"
}

# Funci√≥n para mostrar banner inicial
show_banner() {
    clear
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                       üöÄ INSTALACI√ìN COMPLETA                              ‚ïë
‚ïë                       WEBMIN Y VIRTUALMIN                                 ‚ïë
‚ïë                                                                          ‚ïë
‚ïë                   üí∞ FUNCIONALIDADES PREMIUM GRATIS                       ‚ïë
‚ïë                                                                          ‚ïë
‚ïë  üé® Authentic Theme Pro    üåê Virtualmin Pro     üîí SSL Certificados     ‚ïë
‚ïë  üìß Email Server          üíæ Backup System       üìä Monitoreo Avanzado   ‚ïë
‚ïë  ‚òÅÔ∏è Multi-Cloud           üê≥ Contenedores                                 ‚ïë
‚ïë                                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Funci√≥n para parsear argumentos
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help)
                show_help
                exit 0
                ;;
            --skip-validation)
                SKIP_VALIDATION=true
                log "INFO" "Validaci√≥n inicial omitida por usuario"
                ;;
            --only-validation)
                ONLY_VALIDATION=true
                log "INFO" "Modo solo validaci√≥n activado"
                ;;
            --with-docker)
                WITH_DOCKER=true
                log "INFO" "Configuraci√≥n Docker incluida"
                ;;
            --with-kubernetes)
                WITH_KUBERNETES=true
                log "INFO" "Configuraci√≥n Kubernetes incluida"
                ;;
            --with-monitoring)
                WITH_MONITORING=true
                log "INFO" "Monitoreo del sistema incluido"
                ;;
            --with-backup)
                WITH_BACKUP=true
                log "INFO" "Backup multi-cloud incluido"
                ;;
            *)
                log "ERROR" "Opci√≥n desconocida: $1"
                show_help
                exit 1
                ;;
        esac
        shift
    done
}

# Funci√≥n para verificar prerrequisitos
check_prerequisites() {
    log "STEP" "Verificando prerrequisitos del script maestro"

    # Verificar que estamos en el directorio correcto
    if [[ ! -f "validar_dependencias.sh" ]] || [[ ! -f "instalacion_unificada.sh" ]] || [[ ! -f "instalar_integracion.sh" ]]; then
        log "ERROR" "No se encontraron los scripts necesarios. Aseg√∫rate de estar en el directorio ra√≠z del proyecto."
        exit 1
    fi

    # Verificar permisos de ejecuci√≥n
    local scripts=("validar_dependencias.sh" "instalacion_unificada.sh" "instalar_integracion.sh")
    for script in "${scripts[@]}"; do
        if [[ ! -x "$script" ]]; then
            log "WARNING" "Dando permisos de ejecuci√≥n a $script"
            chmod +x "$script"
        fi
    done

    log "SUCCESS" "Prerrequisitos verificados correctamente"
}

# Funci√≥n para ejecutar validaci√≥n
run_validation() {
    log "STEP" "Ejecutando validaci√≥n del sistema"
    show_progress 1 5 "Validando sistema..."

    if ! bash validar_dependencias.sh; then
        log "ERROR" "La validaci√≥n del sistema fall√≥. Revisa los logs en $LOG_FILE"
        exit 1
    fi

    log "SUCCESS" "Validaci√≥n del sistema completada exitosamente"
    show_progress 2 5 "Sistema validado..."
}

# Funci√≥n para ejecutar instalaci√≥n principal
run_main_installation() {
    log "STEP" "Ejecutando instalaci√≥n principal de Webmin y Virtualmin"
    show_progress 3 5 "Instalando Webmin y Virtualmin..."

    if ! bash instalacion_unificada.sh; then
        log "ERROR" "La instalaci√≥n principal fall√≥. Revisa los logs en $LOG_FILE"
        exit 1
    fi

    log "SUCCESS" "Instalaci√≥n principal completada exitosamente"
    show_progress 4 5 "Webmin y Virtualmin instalados..."
}

# Funci√≥n para ejecutar integraci√≥n de componentes
run_integration() {
    log "STEP" "Ejecutando integraci√≥n de componentes premium"
    show_progress 5 5 "Integrando componentes..."

    if ! bash instalar_integracion.sh; then
        log "ERROR" "La integraci√≥n de componentes fall√≥. Revisa los logs en $LOG_FILE"
        exit 1
    fi

    log "SUCCESS" "Integraci√≥n de componentes completada exitosamente"
    echo # Nueva l√≠nea para la barra de progreso
}

# Funci√≥n para configurar Docker
setup_docker() {
    if [[ "$WITH_DOCKER" == "true" ]]; then
        log "STEP" "Configurando Docker"

        if [[ ! -f "generar_docker.sh" ]]; then
            log "WARNING" "Script generar_docker.sh no encontrado, omitiendo configuraci√≥n Docker"
            return
        fi

        if [[ ! -x "generar_docker.sh" ]]; then
            chmod +x generar_docker.sh
        fi

        if ! bash generar_docker.sh; then
            log "WARNING" "La configuraci√≥n de Docker fall√≥, pero continuando con la instalaci√≥n"
        else
            log "SUCCESS" "Docker configurado exitosamente"
        fi
    fi
}

# Funci√≥n para configurar Kubernetes
setup_kubernetes() {
    if [[ "$WITH_KUBERNETES" == "true" ]]; then
        log "STEP" "Configurando Kubernetes"

        if [[ ! -f "kubernetes_setup.sh" ]]; then
            log "WARNING" "Script kubernetes_setup.sh no encontrado, omitiendo configuraci√≥n Kubernetes"
            return
        fi

        if [[ ! -x "kubernetes_setup.sh" ]]; then
            chmod +x kubernetes_setup.sh
        fi

        if ! bash kubernetes_setup.sh; then
            log "WARNING" "La configuraci√≥n de Kubernetes fall√≥, pero continuando con la instalaci√≥n"
        else
            log "SUCCESS" "Kubernetes configurado exitosamente"
        fi
    fi
}

# Funci√≥n para configurar monitoreo
setup_monitoring() {
    if [[ "$WITH_MONITORING" == "true" ]]; then
        log "STEP" "Configurando monitoreo del sistema"

        if [[ ! -f "monitor_sistema.sh" ]]; then
            log "WARNING" "Script monitor_sistema.sh no encontrado, omitiendo configuraci√≥n de monitoreo"
            return
        fi

        if [[ ! -x "monitor_sistema.sh" ]]; then
            chmod +x monitor_sistema.sh
        fi

        if ! bash monitor_sistema.sh --install; then
            log "WARNING" "La configuraci√≥n de monitoreo fall√≥, pero continuando con la instalaci√≥n"
        else
            log "SUCCESS" "Monitoreo del sistema configurado exitosamente"
        fi
    fi
}

# Funci√≥n para configurar backup
setup_backup() {
    if [[ "$WITH_BACKUP" == "true" ]]; then
        log "STEP" "Configurando backup multi-cloud"

        if [[ ! -f "backup_multicloud.sh" ]]; then
            log "WARNING" "Script backup_multicloud.sh no encontrado, omitiendo configuraci√≥n de backup"
            return
        fi

        if [[ ! -x "backup_multicloud.sh" ]]; then
            chmod +x backup_multicloud.sh
        fi

        log "INFO" "Backup multi-cloud preparado. Ejecuta './backup_multicloud.sh --help' para configurar"
        log "SUCCESS" "Backup multi-cloud configurado exitosamente"
    fi
}

# Funci√≥n para mostrar resumen final
show_final_summary() {
    local end_time=$(date +%s)
    local duration=$((end_time - START_TIME))
    local minutes=$((duration / 60))
    local seconds=$((duration % 60))

    echo -e "${GREEN}"
    cat << 'EOF'

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üéâ INSTALACI√ìN COMPLETADA                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo -e "${YELLOW}‚è±Ô∏è  TIEMPO TOTAL:${NC} ${minutes} minutos y ${seconds} segundos"
    echo -e "${YELLOW}üìÅ LOGS GUARDADOS EN:${NC} $LOG_FILE"
    echo ""

    echo -e "${GREEN}‚úÖ COMPONENTES INSTALADOS:${NC}"
    echo "   üåê Webmin (con interfaz moderna)"
    echo "   üñ•Ô∏è  Virtualmin (gesti√≥n de servidores virtuales)"
    echo "   üé® Authentic Theme (interfaz premium gratis)"
    echo "   üîí SSL Certificates (certificados SSL gratis)"
    echo "   üìß Email Server (servidor de correo completo)"
    echo "   üíæ Backup System (sistema de respaldos avanzado)"
    echo ""

    if [[ "$WITH_DOCKER" == "true" ]]; then
        echo -e "${GREEN}üê≥ Docker configurado${NC}"
    fi
    if [[ "$WITH_KUBERNETES" == "true" ]]; then
        echo -e "${GREEN}‚öì Kubernetes configurado${NC}"
    fi
    if [[ "$WITH_MONITORING" == "true" ]]; then
        echo -e "${GREEN}üìä Monitoreo del sistema activado${NC}"
    fi
    if [[ "$WITH_BACKUP" == "true" ]]; then
        echo -e "${GREEN}‚òÅÔ∏è Backup multi-cloud preparado${NC}"
    fi

    echo ""
    echo -e "${CYAN}üåê ACCEDE A TU PANEL:${NC}"
    echo "   üì± Webmin: https://tu-servidor:10000"
    echo "   üñ•Ô∏è  Virtualmin: https://tu-servidor:10000"
    echo ""

    echo ""

    echo -e "${PURPLE}üìö SCRIPTS ADICIONALES DISPONIBLES:${NC}"
    echo "   üîç ./validar_dependencias.sh    # Validar sistema"
    echo "   üöÄ ./instalacion_unificada.sh   # Reinstalar base"
    echo "   üîß ./instalar_integracion.sh    # Reinstalar componentes"
    echo "   üìä ./monitor_sistema.sh         # Monitoreo manual"
    echo "   üíæ ./backup_multicloud.sh       # Configurar backups"
    echo "   üê≥ ./generar_docker.sh          # Configurar Docker"
    echo "   ‚öì ./kubernetes_setup.sh        # Configurar Kubernetes"
    echo ""

    echo -e "${GREEN}üéä ¬°TU SERVIDOR EST√Å LISTO PARA USAR!${NC}"
}

# Funci√≥n principal
main() {
    # Parsear argumentos
    parse_args "$@"

    # Mostrar banner
    show_banner

    # Verificar prerrequisitos
    check_prerequisites

    # Si solo validaci√≥n, ejecutar y salir
    if [[ "$ONLY_VALIDATION" == "true" ]]; then
        run_validation
        log "SUCCESS" "Validaci√≥n completada. El sistema est√° listo para instalaci√≥n."
        exit 0
    fi

    # Ejecutar validaci√≥n (a menos que se omita)
    if [[ "$SKIP_VALIDATION" == "false" ]]; then
        run_validation
    else
        log "WARNING" "Validaci√≥n omitida por solicitud del usuario"
    fi

    # Ejecutar instalaci√≥n principal
    run_main_installation

    # Ejecutar integraci√≥n
    run_integration

    # Configuraciones opcionales
    setup_docker
    setup_kubernetes
    setup_monitoring
    setup_backup

    # Mostrar resumen final
    show_final_summary
}

# Ejecutar funci√≥n principal
main "$@"
